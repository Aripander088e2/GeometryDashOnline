<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>xot_cbs_oColorBlindnessSimulation</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEMO - Status and Controls
{
    // ENABLE - Key and modifier combo
    keyToggle = ord("S");
    keyToggleShift = false;
    keyToggleCtrl = false;
    keyToggleAlt = false;
    keyToggleMod = keyToggleShift &lt;&lt; 2 | keyToggleCtrl &lt;&lt; 1 | keyToggleAlt;
            
    // MODE - Key and modifier combo
    keyMode = ord("M");
    keyModeShift = false;
    keyModeCtrl = false;
    keyModeAlt = false;
    keyModeMod = keyModeShift &lt;&lt; 2 | keyModeCtrl &lt;&lt; 1 | keyModeAlt;
    
    // INFO - Key and modifier combo
    keyInfo = ord("I");
    keyInfoShift = false;
    keyInfoCtrl = false;
    keyInfoAlt = false;
    keyInfoMod = keyInfoShift &lt;&lt; 2 | keyInfoCtrl &lt;&lt; 1 | keyInfoAlt;
    info = false;        
    
    // Status helper messages
    textToggle[0] = "OFF";
    textToggle[1] = "ON";

    
    // Demonstration spectrums    
    modeBack[0] = xot_cbs_backDeuteranopiaSpectrum_DEMO;
    modeBack[1] = xot_cbs_backProtanopiaSpectrum_DEMO;
    modeBack[2] = xot_cbs_backTritanopiaSpectrum_DEMO;
    
    event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEMO - Set Background Spectrum
{
    background_index[0] = modeBack[mode];
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEMO - Create Presets
{
    if (instance_exists(xot_cbs_oPreset_DEMO))
    {
        with (xot_cbs_oPreset_DEMO) instance_destroy();
    }
    
    switch (modeText[mode])
    {
        case "Deuteranopia":
        
            with (instance_create( 75,200,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(124,0,35);
            with (instance_create( 75,250,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(0,79,6);

            with (instance_create(175,200,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(218,0,10);
            with (instance_create(175,250,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(0,139,33);
            
            with (instance_create(275,200,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(255,194,188);
            with (instance_create(275,250,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(159,255,179);
            
            with (instance_create(375,200,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(255,55,149);
            with (instance_create(375,250,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(0,186,131);

            with (instance_create(475,200,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(183,0,205);
            with (instance_create(475,250,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(0,78,184);
            
            with (instance_create(575,200,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(83,0,98);
            with (instance_create(575,250,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(0,29,104);
            
            with (instance_create(100,350,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(255,49,54);
            with (instance_create(150,375,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(208,98,0);
            with (instance_create(200,400,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(122,157,0);
            with (instance_create(250,425,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(10,255,39);

            with (instance_create(400,350,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(255,83,225);
            with (instance_create(450,375,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(191,140,255);
            with (instance_create(500,400,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(135,186,255);
            with (instance_create(550,425,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(9,241,255);
            
            break;
        
        case "Protanopia":
                               
            with (instance_create(475, 50,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(77,255,224);
            with (instance_create(475,100,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(236,240,255);
            
            with (instance_create(575, 50,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(16,0,3);
            with (instance_create(575,100,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(168,0,28);
            
            with (instance_create(75,200,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(252,24,0);
            with (instance_create(75,250,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(0,72,30);

            with (instance_create(175,200,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(255,118,35);
            with (instance_create(175,250,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(0,171,16);
            
            with (instance_create(275,200,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(255,114,127);
            with (instance_create(275,250,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(0,218,180);
            
            with (instance_create(375,200,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(255,154,221);
            with (instance_create(375,250,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(0,201,231);

            with (instance_create(475,200,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(255,84,225);
            with (instance_create(475,250,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(35,123,255);
            
            with (instance_create(575,200,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(255,25,209);
            with (instance_create(575,250,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(0,41,219);
            
            with (instance_create(100,350,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(255,219,180);//(255,93,50);//
            with (instance_create(150,375,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(239,255,173);//(171,113,0);//
            with (instance_create(200,400,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(169,255,167);//(104,126,0);//
            with (instance_create(250,425,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(81,255,179);//(0,154,54);//

            with (instance_create(400,350,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(0,218,215);//(36,255,237);
            with (instance_create(450,375,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(158,183,255);//(143,225,255);
            with (instance_create(500,400,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(222,169,255);//(209,212,255);
            with (instance_create(550,425,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(255,161,201);//(255,192,220);
            
            break;
        
        case "Tritanopia":
        
            with (instance_create(375, 50,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(252,255,3);
            with (instance_create(375,100,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(255,223,220);
            
            with (instance_create(475, 50,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(134,158,0);
            with (instance_create(475,100,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(158,110,255);
            
            with (instance_create(575, 50,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(2,0,19);
            with (instance_create(575,100,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(40,0,242);
            
            with (instance_create(75,200,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(162,255,0);
            with (instance_create(75,250,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(180,206,255);

            with (instance_create(175,200,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(59,255,13);
            with (instance_create(175,250,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(87,229,255);
            
            with (instance_create(275,200,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(48,119,0);
            with (instance_create(275,250,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(0,90,225);
            
            with (instance_create(375,200,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(79,37,0);
            with (instance_create(375,250,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(120,0,243);

            with (instance_create(475,200,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(176,58,0);
            with (instance_create(475,250,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(201,0,231);
            
            with (instance_create(575,200,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(219,149,0);
            with (instance_create(575,250,xot_cbs_oPreset_DEMO)) image_blend = make_color_rgb(223,93,255);
            
            break;
    }

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEMO - Status Messages
{
    // Shader status
    var message;
    message  = 'MODE: '+modeText[mode]+' '+textToggle[enabled]+'#';
    message += '[M] change simulation mode#';
    message += '[S] toggle simulation on/off#';
    message += '[I] toggle information display#';
    
    if (enabled)
    {
        if (!shader_is_compiled(modeShad[mode]))
        {
            message += 'SHADER ERROR#';
        }
    }
    
    if (info)
    {
        draw_set_color(c_black);
        draw_set_alpha(0.6);
        draw_rectangle(0,0,room_width,room_height,false);
        draw_set_alpha(1.0);
        
        message += '#';
        message += 'This demonstration simulates the most common types of "color blindness".#';
        message += 'Around 8% of men and 0.5% of women have color perception impairment.#';
        message += 'Deuteranopia, often called red-green color blindness, is by far the#';
        message += 'most common type. Protanopia is similar but more rare. Tritanopia, or#';
        message += 'blue-yellow color blindness, is very rare.#';
        message += '#';
        message += 'The spectrum in the background is divided into an arbitrary number of#';
        message += 'groups. The colors in each group would appear similar for a person#';
        message += 'with the selected type of color blindness. Clicking the left mouse#';
        message += 'button will sample the color under the cursor and create ball of#';
        message += 'that color. It can be "dragged" around the screen using the left#';
        message += 'mouse button for easy comparison with other color samples. A color#';
        message += 'sample can be removed by right-clicking on it.#';
        message += '#';
        message += 'The simulation system can be easily added to existing projects#'; 
        message += 'to immediately see how they would appear to a person with limited#';
        message += 'color perception. It is intended to help the developer find areas#';
        message += 'of their project which would benefit from improved accessibility.#';
        message += 'In most cases, the system can be imported into a project with#';
        message += 'almost no modifications. See the simulation object for more usage#';
        message += 'information and links to color blindness resources.#';
    }
    
    // Display status message
    draw_set_color(c_black);
    draw_set_font(xot_cbs_fontStatus_DEMO);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_text(x+1,y+1,message);
    draw_set_color(c_white);
    draw_text(x,y,message);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEMO - Keyboard Controller
{
    // Poll the modifier keys
    var modifiers;
    modifiers = keyboard_check(vk_shift) &lt;&lt; 2 | keyboard_check(vk_control) &lt;&lt; 1 | keyboard_check(vk_alt);
    
    
    // ENABLE - Check key and modifier combo
    if (keyboard_check_pressed(keyToggle))
    {
        if (keyToggleMod == modifiers)
        {
            enabled = not enabled;
        }
    }
    
    
    // MODE - Check key and modifier combo
    if (keyboard_check_pressed(keyMode))
    {
        if (keyModeMod == modifiers)
        {
            mode = (1 + mode) mod modes;
            event_user(0);
        }
    }
    
    
    // INFO - Check key and modifier combo
    if (keyboard_check_pressed(keyInfo))
    {
        if (keyInfoMod == modifiers)
        {
            info = !info;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEMO - Mouse Controller
{
    // Create a test color object matching the clicked color
    if (mouse_check_button_pressed(mb_left))
    {
        if (!collision_point(mouse_x,mouse_y,xot_cbs_oBall_DEMO,false,true))
        {
            var h = (255 * (mouse_x / room_width)) mod 256;
            var s = min(255, 512 * (1.0 - mouse_y / room_height));
            var v = min(255, 512 * (mouse_y / room_height));
            var color = make_color_hsv(h,s,v);
            with (instance_create(mouse_x,mouse_y,xot_cbs_oBall_DEMO))
            {
                image_blend = color;
                drag = true;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
