<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-15</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>NextRoom = room;
currentframe = 0
maxframes = 30

enum Transitions {
    Fade,
    SlideBounceIn,
    SlideBounceOut,
    RotateCam,
    ScaleXSine,
    ScaleYSine,
    ScaleSine,
    SlideLeft,
    SlideRight,
    SlideUp,
    SlideDown,
    ColourFade,
    CrossFade
}

//scr_switchTransitions();

Transition = Transitions.Fade;

// copy the old room so we can display it on the second room
sur_oldroom = surface_create(view_wview[0],view_hview[0]);
surface_copy(sur_oldroom,0,0,application_surface)

surface_set_target(sur_oldroom);
draw_enable_alphablend(false);
draw_set_colour_write_enable(true,true,true,false);
draw_surface(application_surface,0,0);
draw_set_colour_write_enable(true,true,true,true);
draw_enable_alphablend(true);
surface_reset_target()

if (Transition != Transitions.Fade) {
    room_goto(NextRoom);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free(sur_newroom)
surface_free(sur_oldroom)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>currentframe++

if (currentframe &gt; maxframes) {
    instance_destroy() // The transition has finished so destroy it
}

// We are now on the second room so record that room. 
if (currentframe == 2) { 
    sur_newroom = surface_create(view_wview[0],view_hview[0]);
    surface_copy(sur_newroom,0,0,application_surface)
    
    surface_set_target(sur_newroom);
    draw_enable_alphablend(false);
    draw_set_colour_write_enable(true,true,true,false);
    draw_surface(application_surface,0,0);
    draw_set_colour_write_enable(true,true,true,true);
    draw_enable_alphablend(true);
    surface_reset_target()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (currentframe &gt; 1) {
    if (Transition == Transitions.Fade) {
        if room != NextRoom &amp;&amp; currentframe == ceil(maxframes/2) {
            room_goto(NextRoom);
        }
        
        draw_set_alpha(1-abs(currentframe-maxframes/2)/(maxframes/2));
        draw_set_color(c_black);
        draw_rectangle(-10,-10,display_get_gui_width(),display_get_gui_height(),false);
        draw_set_alpha(1);
    }
    
    if (Transition == Transitions.SlideBounceOut) {
        // convert the number of frames that have passed into a number between 0 and the room width
        var slideamount = scr_ease_out_bounce(currentframe,-view_hview[0],view_hview[0],maxframes)
        
        if (surface_exists(sur_oldroom)) {
            draw_enable_alphablend(false);
            draw_set_colour_write_enable(true,true,true,false);
            draw_surface_ext(sur_oldroom, 0, 0, 1, 1, 0, c_white, 1)
            draw_set_colour_write_enable(true,true,true,true);
            draw_enable_alphablend(true);
        }
        
        if (surface_exists(sur_newroom)) {
            draw_enable_alphablend(false);
            draw_set_colour_write_enable(true,true,true,false);
            draw_surface_ext(sur_newroom, 0, slideamount, 1, 1, 0, c_white, 1)
            draw_set_colour_write_enable(true,true,true,true);
            draw_enable_alphablend(true);
        }
    }
    
    if (Transition == Transitions.SlideBounceIn) {
        // convert the number of frames that have passed into a number between 0 and the room width
        var slideamount = scr_ease_out_bounce(currentframe,view_hview[0],-view_hview[0],maxframes)
        
        if (surface_exists(sur_oldroom)) {
            draw_enable_alphablend(false);
            draw_set_colour_write_enable(true,true,true,false);
            draw_surface_ext(sur_oldroom, 0, 0, 1, 1, 0, c_white, 1)
            draw_set_colour_write_enable(true,true,true,true);
            draw_enable_alphablend(true);
        }
        
        if (surface_exists(sur_newroom)) {
            draw_enable_alphablend(false);
            draw_set_colour_write_enable(true,true,true,false);
            draw_surface_ext(sur_newroom, 0, slideamount, 1, 1, 0, c_white, 1)
            draw_set_colour_write_enable(true,true,true,true);
            draw_enable_alphablend(true);
        }
    }
    
    if (Transition == Transitions.RotateCam) {
        // convert the number of frames that have passed into a number between 0 and the room width
        var angleamount = scr_ease_out_bounce(currentframe,90,-90,maxframes)
        
        if (surface_exists(sur_oldroom)) {
            draw_enable_alphablend(false);
            draw_set_colour_write_enable(true,true,true,false);
            draw_surface_ext(sur_oldroom, 0, 0, 1, 1, 0, c_white, 1)
            draw_set_colour_write_enable(true,true,true,true);
            draw_enable_alphablend(true);
        }
        
        if (surface_exists(sur_newroom)) {
            draw_enable_alphablend(false);
            draw_set_colour_write_enable(true,true,true,false);
            draw_surface_ext(sur_newroom, 0, 0, 1, 1, angleamount, c_white, 1)
            draw_set_colour_write_enable(true,true,true,true);
            draw_enable_alphablend(true);
        }
    }
    
    if (Transition == Transitions.ScaleXSine) {
        // convert the number of frames that have passed into a number between 0 and the room width
        var scalexamount = scr_ease_out_sine(currentframe,0,1,maxframes)
        
        if (surface_exists(sur_oldroom)) {
            draw_enable_alphablend(false);
            draw_set_colour_write_enable(true,true,true,false);
            draw_surface_ext(sur_oldroom, 0, 0, 1, 1, 0, c_white, 1)
            draw_set_colour_write_enable(true,true,true,true);
            draw_enable_alphablend(true);
        }
        
        if (surface_exists(sur_newroom)) {
            draw_enable_alphablend(false);
            draw_set_colour_write_enable(true,true,true,false);
            draw_surface_ext(sur_newroom, 0, 0, scalexamount, 1, 0, c_white, 1)
            draw_set_colour_write_enable(true,true,true,true);
            draw_enable_alphablend(true);
        }
    }
    
    if (Transition == Transitions.ScaleYSine) {
        // convert the number of frames that have passed into a number between 0 and the room width
        var scaleyamount = scr_ease_out_sine(currentframe,0,1,maxframes)
        
        if (surface_exists(sur_oldroom)) {
            draw_enable_alphablend(false);
            draw_set_colour_write_enable(true,true,true,false);
            draw_surface_ext(sur_oldroom, 0, 0, 1, 1, 0, c_white, 1)
            draw_set_colour_write_enable(true,true,true,true);
            draw_enable_alphablend(true);
        }
        
        if (surface_exists(sur_newroom)) {
            draw_enable_alphablend(false);
            draw_set_colour_write_enable(true,true,true,false);
            draw_surface_ext(sur_newroom, 0, 0, 1, scaleyamount, 0, c_white, 1)
            draw_set_colour_write_enable(true,true,true,true);
            draw_enable_alphablend(true);
        }
    }
    
    if (Transition == Transitions.ScaleSine) {
        // convert the number of frames that have passed into a number between 0 and the room width
        var scalexamount = scr_ease_out_sine(currentframe,0,1,maxframes)
        var scaleyamount = scr_ease_out_sine(currentframe,0,1,maxframes)
        
        if (surface_exists(sur_oldroom)) {
            draw_enable_alphablend(false);
            draw_set_colour_write_enable(true,true,true,false);
            draw_surface_ext(sur_oldroom, 0, 0, 1, 1, 0, c_white, 1)
            draw_set_colour_write_enable(true,true,true,true);
            draw_enable_alphablend(true);
        }
        
        if (surface_exists(sur_newroom)) {
            draw_enable_alphablend(false);
            draw_set_colour_write_enable(true,true,true,false);
            draw_surface_ext(sur_newroom, 0, 0, scalexamount, scaleyamount, 0, c_white, 1)
            draw_set_colour_write_enable(true,true,true,true);
            draw_enable_alphablend(true);
        }
    }
    
    if (Transition == Transitions.SlideLeft) {
        // convert the number of frames that have passed into a number between 0 and the room width
        var xamount = scr_ease_out_quad(currentframe,-view_wview[0],view_wview[0],maxframes)
        
        if (surface_exists(sur_oldroom)) {
            draw_enable_alphablend(false);
            draw_set_colour_write_enable(true,true,true,false);
            draw_surface_ext(sur_oldroom, 0, 0, 1, 1, 0, c_white, 1)
            draw_set_colour_write_enable(true,true,true,true);
            draw_enable_alphablend(true);
        }
        
        if (surface_exists(sur_newroom)) {
            draw_enable_alphablend(false);
            draw_set_colour_write_enable(true,true,true,false);
            draw_surface_ext(sur_newroom, xamount, 0, 1, 1, 0, c_white, 1)
            draw_set_colour_write_enable(true,true,true,true);
            draw_enable_alphablend(true);
        }
    }
    
    if (Transition == Transitions.SlideRight) {
        // convert the number of frames that have passed into a number between 0 and the room width
        var xamount = scr_ease_out_quad(currentframe,view_wview[0],-view_wview[0],maxframes)
        
        if (surface_exists(sur_oldroom)) {
            draw_enable_alphablend(false);
            draw_set_colour_write_enable(true,true,true,false);
            draw_surface_ext(sur_oldroom, 0, 0, 1, 1, 0, c_white, 1)
            draw_set_colour_write_enable(true,true,true,true);
            draw_enable_alphablend(true);
        }
        
        if (surface_exists(sur_newroom)) {
            draw_enable_alphablend(false);
            draw_set_colour_write_enable(true,true,true,false);
            draw_surface_ext(sur_newroom, xamount, 0, 1, 1, 0, c_white, 1)
            draw_set_colour_write_enable(true,true,true,true);
            draw_enable_alphablend(true);
        }
    }
    
    if (Transition == Transitions.SlideUp) {
        // convert the number of frames that have passed into a number between 0 and the room width
        var yamount = scr_ease_out_quad(currentframe,-view_hview[0],view_hview[0],maxframes)
        
        if (surface_exists(sur_oldroom)) {
            draw_enable_alphablend(false);
            draw_set_colour_write_enable(true,true,true,false);
            draw_surface_ext(sur_oldroom, 0, 0, 1, 1, 0, c_white, 1)
            draw_set_colour_write_enable(true,true,true,true);
            draw_enable_alphablend(true);
        }
        
        if (surface_exists(sur_newroom)) {
            draw_enable_alphablend(false);
            draw_set_colour_write_enable(true,true,true,false);
            draw_surface_ext(sur_newroom, 0, yamount, 1, 1, 0, c_white, 1)
            draw_set_colour_write_enable(true,true,true,true);
            draw_enable_alphablend(true);
        }
    }
    
    if (Transition == Transitions.SlideDown) {
        // convert the number of frames that have passed into a number between 0 and the room width
        var yamount = scr_ease_out_quad(currentframe,view_hview[0],-view_hview[0],maxframes)
        
        if (surface_exists(sur_oldroom)) {
            draw_enable_alphablend(false);
            draw_set_colour_write_enable(true,true,true,false);
            draw_surface_ext(sur_oldroom, 0, 0, 1, 1, 0, c_white, 1)
            draw_set_colour_write_enable(true,true,true,true);
            draw_enable_alphablend(true);
        }
        
        if (surface_exists(sur_newroom)) {
            draw_enable_alphablend(false);
            draw_set_colour_write_enable(true,true,true,false);
            draw_surface_ext(sur_newroom, 0, yamount, 1, 1, 0, c_white, 1)
            draw_set_colour_write_enable(true,true,true,true);
            draw_enable_alphablend(true);
        }
    }
    
    if (Transition == Transitions.ColourFade) {
        // convert the number of frames that have passed into a number between 0 and the room width
        var amount = scr_ease_out_quad(currentframe,0,1,maxframes)
        var ColourAmount = merge_colour(c_red, c_white, amount)
        
        if (surface_exists(sur_oldroom)) {
            draw_enable_alphablend(false);
            draw_set_colour_write_enable(true,true,true,false);
            draw_surface_ext(sur_oldroom, 0, 0, 1, 1, 0, c_white, 1)
            draw_set_colour_write_enable(true,true,true,true);
            draw_enable_alphablend(true);
        }
        
        if (surface_exists(sur_newroom)) {
            draw_enable_alphablend(false);
            draw_set_colour_write_enable(true,true,true,false);
            draw_surface_ext(sur_newroom, 0, 0, 1, 1, 0, ColourAmount, 1)
            draw_set_colour_write_enable(true,true,true,true);
            draw_enable_alphablend(true);
        }
    }
    
    if (Transition == Transitions.CrossFade) {
        // convert the number of frames that have passed into a number between 0 and the room width
        draw_surface_stretched_ext(sur_oldroom, 0, 0, display_get_gui_width(), display_get_gui_height(), c_white, 1-currentframe/maxframes)
    }
}

/// I do this to hide the flicker where the next room pops up for 1 frame 
if (Transition == Transitions.SlideBounceIn || Transition == Transitions.SlideBounceOut || Transition == Transitions.RotateCam || Transition == Transitions.ScaleXSine || Transition == Transitions.ScaleYSine || Transition == Transitions.ScaleSine || Transition == Transitions.SlideLeft || Transition == Transitions.SlideRight || Transition == Transitions.SlideUp || Transition == Transitions.SlideDown || Transition == Transitions.ColourFade || Transition == Transitions.CrossFade) {
    if (currentframe == 1) { 
        if (surface_exists(sur_oldroom)) {
            draw_enable_alphablend(false);
            draw_set_colour_write_enable(true,true,true,false);
            draw_surface_ext(sur_oldroom, 0, 0, 1, 1, 0, c_white, 1)
            draw_set_colour_write_enable(true,true,true,true);
            draw_enable_alphablend(true);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
