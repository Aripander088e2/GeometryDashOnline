<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>9999999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup
globalvar view_halign, view_valign, view_xoffset, view_yoffset,
          view_constraint, view_xmin, view_ymin, view_xmax, view_ymax,
          view_hspd, view_vspd, view_aspd, view_wscspd, view_hscspd,
          view_shake_time, view_shake_position, view_shake_size,
          view_shake_angle;
for(var i=7;i&gt;=0;i--){
 //Default align (top-left corner)
 view_halign[i] = .5;
 view_valign[i] = .5;
 
 //Default speed (for moving, rotating and scaling the view)
 view_hspd[i] = 0;
 view_vspd[i] = 0;
 view_aspd[i] = 0;
 view_wscspd[i] = 0;
 view_hscspd[i] = 0;
 
 //Default offset (none)
 view_xoffset[i] = 0;
 view_yoffset[i] = 0;
 
 //Default constraintment (the room, and on)
 view_constraint[i] = true;
 view_xmin[i] = 0;
 view_ymin[i] = 0;
 view_xmax[i] = room_width-1;
 view_ymax[i] = room_height-1;
 
 //View shaking
 view_shake_time[i] = 0;
 view_shake_position[i] = 0;
 view_shake_size[i] = 0;
 view_shake_angle[i] = 0;
 
 view_shake_xprevious[i] = 0;
 view_shake_yprevious[i] = 0;
 view_shake_wprevious[i] = 0;
 view_shake_hprevious[i] = 0;
 view_shake_aprevious[i] = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pull effect back
for(var i=0;i&lt;8;i++){ 
 //Shake screen
 if view_shake_time[i] &gt; 0 {
  //Position
  view_xview[i] -= view_shake_xprevious[i];
  view_yview[i] -= view_shake_yprevious[i];
  view_shake_xprevious[i] = 0;
  view_shake_yprevious[i] = 0;
  //Size
  if view_shake_size[i] &gt; 0 {
   view_wview[i] -= view_shake_wprevious[i];
   view_hview[i] -= view_shake_hprevious[i];
   view_shake_wprevious[i] = 0;
   view_shake_hprevious[i] = 0;
  }
  //Angle
  if view_shake_angle[i] &gt; 0 {
   view_angle[i] -= view_shake_aprevious[i];
   view_shake_aprevious[i] = 0;
  }
 }
 //Count down
 view_shake_time[i]--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set effect
for(var i=0;i&lt;8;i++){ 
 //Shake screen
 if view_shake_time[i] &gt; 0 {
  var _a;
  view_shake_xprevious[i] = 0;
  view_shake_yprevious[i] = 0;
  //Position
  if view_shake_position[i] &gt; 0 {
   view_shake_xprevious[i] = random(view_shake_position[i]/2)*choose(-1,1);
   view_shake_yprevious[i] = random(view_shake_position[i]/2)*choose(-1,1);
  }
  //Size
  if view_shake_size[i] &gt; 0 {
   view_shake_wprevious[i] = random(view_shake_size[i]/2)*choose(-1,1);
   view_shake_hprevious[i] = view_shake_wprevious[i]/view_wview[i]*view_hview[i];
   _a = view_calculate_position_from_size(i,view_wview[i]+view_shake_wprevious[i],view_hview[i]+view_shake_hprevious[i]);
   view_shake_xprevious[i] += _a[0]-view_xview[i];
   view_shake_yprevious[i] += _a[1]-view_yview[i];
   view_wview[i] += view_shake_wprevious[i];
   view_hview[i] += view_shake_hprevious[i];
  }
  //Angle
  if view_shake_angle[i] &gt; 0 {
   view_shake_aprevious[i] = random(view_shake_angle[i]/2)*choose(-1,1);
   _a = view_calculate_position_from_angle(i,view_angle[i]+view_shake_aprevious[i]);
   view_shake_xprevious[i] += _a[0]-view_xview[i];
   view_shake_yprevious[i] += _a[1]-view_yview[i];
   view_angle[i] += view_shake_aprevious[i];
  }
  view_xview[i] += view_shake_xprevious[i];
  view_yview[i] += view_shake_yprevious[i];
 }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
