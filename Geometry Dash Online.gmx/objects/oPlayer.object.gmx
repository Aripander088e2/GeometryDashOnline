<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBtnCubes</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oParEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables

// Inherit Entity
event_inherited();
//instance_create(x, y, obj_SpiderAnimControler)
instance_create(x, y, obj_ArmadilloAnimControler)

ChangeColor = false;
EndLevel = false;

facing = 1;
SpiderAlpha = 1.0;
GameMode = 1;
ArmadilloPos = 1;
jumpState = 0;
RotJetPack  = 0;
UFORotate = 0;
imageangle = 0;
newimageangle = 0;
ShipRotation = 0;
BallRotation = 0;
UFORotation = 0;
ArmadilloRotation = 0;
SwingRotation = 0;
JetPackRot = 0;
StateAnim = 1
Teleport01 = false;
Teleport02 = false;
SpeedVar = 1;
GravState = 1;
TimeWarp = 1;

// Movement ///////////////////////////////////////////////////////////////////

groundAccel = 0.55;
groundFric  = 0.55;
airAccel    = 1.00;
airFric     = 1.00;
vxMax       = 9.00;
vyMax       = 24.0;
jumpHeight  = 21.0;
gravNorm    = 1.50;
gravSlide   = 0.50; 
gravDir     = 1.00;
gravRise    = 0.50;

clingTime   = 4.0;

// Misc ///////////////////////////////////////////////////////////////////////

// States
IDLE      = 10;
RUN       = 11;
JUMP      = 12;

// Initialize properties
state  = IDLE;
facing = image_xscale; // Change xscale in editor to adjust initial facing

// For squash + stretch
xscale = 1.17;
yscale = 1.17;

///////////////////////////////////////////////////////////////////////////////

// Legacy code, haha
sticking = false
alarm[0] = 1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>SpiderXState = 5;
SpiderYState = 0;
SpiderScaleXState = 1.17;
SpiderScaleYState = 1.17;
SpiderAngleState = 0;

SpiderXState02 = 0;
SpiderYState02 = 11;
SpiderScaleXState02 = 1.17;
SpiderScaleYState02 = 1.17;
SpiderAngleState02 = 0;

SpiderXState03 = 33;
SpiderYState03 = 11;
SpiderScaleXState03 = 1.17;
SpiderScaleYState03 = 1.17;
SpiderAngleState03 = 0;

SpiderXState04 = 17;
SpiderYState04 = 11;
SpiderScaleXState04 = 1.17;
SpiderScaleYState04 = 1.17;
SpiderAngleState04 = 0;

SpiderXState05 = 10;
SpiderYState05 = 6;
SpiderScaleXState05 = 1.15;
SpiderScaleYState05 = 1.17;
SpiderAngleState05 = 15;

SpiderXState06 = 17;
SpiderYState06 = 13;
SpiderScaleXState06 = 1.17;
SpiderScaleYState06 = 1.17;
SpiderAngleState06 = -40;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sticking = false;

switch(GameMode) {
    case 1:
    sprite_set_offset(sprCubesCol01, 38, 38)
    sprite_set_offset(sprCubesCol02, 38, 38)
    sprite_set_offset(sprCubesColExtra, 38, 38)
    sprite_set_offset(sprCubeGlow, 40, 37)
    break;
    
    case 2:
    sprite_set_offset(sprCubesCol01, 34, 53)
    sprite_set_offset(sprCubesCol02, 34, 53)
    sprite_set_offset(sprCubesColExtra, 34, 53)
    sprite_set_offset(sprCubeGlow, 36, 52)
    
    sprite_set_offset(sprShipCol01, 51, 20)
    sprite_set_offset(sprShipCol02, 51, 20)
    sprite_set_offset(sprShipColExtra, 51, 20)
    sprite_set_offset(sprShipGlow, 53, 22)
    break;
    
    case 4:
    sprite_set_offset(sprCubesCol01, 38, 53)
    sprite_set_offset(sprCubesCol02, 38, 53)
    sprite_set_offset(sprCubesColExtra, 38, 53)
    sprite_set_offset(sprCubeGlow, 40, 52)
    
    sprite_set_offset(sprUFOCol01, 45, 32)
    sprite_set_offset(sprUFOCol02, 45, 32)
    sprite_set_offset(sprUFOColExtra, 45, 32)
    sprite_set_offset(sprUFOGlow, 45, 32)
    break;
    
    case 9:
    sprite_set_offset(sprCubesCol01, 23, 48)
    sprite_set_offset(sprCubesCol02, 23, 48)
    sprite_set_offset(sprCubesColExtra, 23, 48)
    sprite_set_offset(sprCubeGlow, 24, 47)
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inherit Entity
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Procedural Animation

if (state == RUN) {
    if (gravDir == 1.00) {
        if (random(100) &gt; 80) {
            with (instance_create(x + random_range(-8, 8), bbox_bottom, oFxDust))
                direction = 90 + random_range(-45, 45);
        }
    } else if (gravDir == -1.00) {
        if (random(100) &gt; 80) {
            with (instance_create(x + random_range(-8, 8), bbox_top, oFxDust))
                direction = 90 + random_range(-45, 45);
        }
    }
}
xscale = Approach(xscale, 1.17, 0.05 * TimeWarp);
yscale = Approach(yscale, 1.17, 0.05 * TimeWarp);

if (global.Pause) {
    vx = 0;
    vy = 0;
    groundAccel = 0;
    groundFric = 0;
    airAccel = 0;
    airFric = 0;
    gravSlide = 0;
    gravNorm = 0;
}
else {
    
    groundAccel = 0.55;
    groundFric  = 0.55;
    airAccel    = 1.00;
    airFric     = 1.00;
    gravSlide   = 0.50;
    
    switch(GameMode) {
        case 1:
        gravNorm    = 1.50 * TimeWarp;
        vyMax       = 24.0;
        break;
        
        case 2:
        gravNorm    = 1.00 * TimeWarp;
        vyMax       = 24.0;
        break;
        
        case 4:
        gravNorm    = 1.00 * TimeWarp;
        vyMax       = 24.0;
        break;
        
        case 5:
        //Noone
        break;
        
        case 6:
        gravNorm    = 1.50 * TimeWarp;
        vyMax       = 24.0;
        break;
        
        case 8:
        gravNorm    = 0.95 * TimeWarp;
        vyMax       = 24.0;
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Death

// Crushed by moving solid
if (place_meeting(x, y, oParSolid))
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var onGroundPrev = onGround;

event_inherited();

// Landing after jump
/*if (onGround &amp;&amp; !onGroundPrev) {
    // Squash + stretch
    xscale = 1.5;
    yscale = 0.5;
    
    // Dust particles
    for (var i = 0; i &lt; 4; i++)
        instance_create(random_range(bbox_left, bbox_right), bbox_bottom, oFxDust);
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

// Input //////////////////////////////////////////////////////////////////////

kLeft        = keyboard_check(vk_left)           || keyboard_check(ord('A'))          || gamepad_axis_value(0, gp_axislh) &lt; -0.40;
kRight       = keyboard_check(vk_right)          || keyboard_check(ord('D'))          || gamepad_axis_value(0, gp_axislh) &gt;  0.40;
kUp          = keyboard_check(vk_up)             || keyboard_check(ord('W'))          || gamepad_axis_value(0, gp_axislv) &lt; -0.40;
kDown        = keyboard_check(vk_down)           || keyboard_check(ord('S'))          || gamepad_axis_value(0, gp_axislv) &gt;  0.75; // Test new values

kJump        = keyboard_check(vk_up)             || keyboard_check(ord('W'))          || keyboard_check(vk_space)         || gamepad_button_check(0, gp_face1);
kJumpPressed = keyboard_check_pressed(vk_up)     || keyboard_check_pressed(ord('W'))  || keyboard_check_pressed(vk_space)  || gamepad_button_check_pressed(0, gp_face1);
kJumpRelease = keyboard_check_released(vk_up)    || keyboard_check_released(ord('W')) || keyboard_check_released(vk_space) || gamepad_button_check_released(0, gp_face1);

// Movement ///////////////////////////////////////////////////////////////////

// AkUppply the correct form of acceleration and friction
var tempAccel, tempFric;

if (onGround) {  
    tempAccel = groundAccel;
    tempFric  = groundFric;
} else {
    tempAccel = airAccel;
    tempFric  = airFric;
}

// Handle gravity
if (global.Pause == false) {
if (!onGround) {
    if ((cLeft || cRight) &amp;&amp; vy &gt;= 0) {
        // Wall slide
        vy = Approach(vy, vyMax * gravDir, gravSlide);
    } else {
        // Fall normally
        vy = Approach(vy, vyMax * gravDir, gravNorm);
    }
}

// Left 
if (kLeft &amp;&amp; !kRight &amp;&amp; !sticking) {
    facing = -1;
    state  = RUN;
    RotJetPack  = -16;
    
    // Apply acceleration left
    if (vx &gt; 0)
        vx = Approach(vx, 0, tempFric);   
    vx = Approach(vx, -vxMax * SpeedVar, tempAccel);
// Right
} else if (kRight &amp;&amp; !kLeft &amp;&amp; !sticking) {
    facing = 1;
    state  = RUN;
    RotJetPack  = 16;
    
    // Apply acceleration right
    if (vx &lt; 0)
        vx = Approach(vx, 0, tempFric);   
    vx = Approach(vx, vxMax * SpeedVar, tempAccel);
}

// Friction
if (!kRight &amp;&amp; !kLeft) {
    vx    = Approach(vx, 0, tempFric);
    state = IDLE;
    RotJetPack  = 0;
    //newimageangle   = lerp(newimageangle, 0, 0.15);
}

if (GameMode = 6) {
    if (onGround) {
        SpiderAlpha = 1.00;
        gravNorm    = 1.50 * TimeWarp;
        vyMax       = 24.0;
    }
}
else {
    if (onGround) {
        image_alpha = 1.00;
        SpiderAlpha = 1.00;
        gravNorm    = 1.50 * TimeWarp;
        vyMax       = 24.0;
    }
}

if (GameMode == 2 || GameMode == 9) {
    if (place_meeting(x, y + 1 * gravDir, oParSolid)) {
        image_alpha = 1.00;
        SpiderAlpha = 1.00;
        gravNorm    = 1.50;
        vyMax       = 24.0;
    }
}

if (GameMode = 6) {
    if (jumpState == 0) {
        ArmadilloPos = 1
    } else if (jumpState == 1) {
        ArmadilloPos = 2
    }
    
    if (onGround) {
        ArmadilloPos = 1
    }
}

/*if (GameMode == 1 || GameMode == 2 || GameMode == 3 || GameMode == 4 || GameMode == 5 || GameMode == 8) {
    //instance_deactivate_object(obj_SpiderAnimControler)
    instance_deactivate_object(obj_ArmadilloAnimControler)
}*/

if (GameMode == 7) {
    timeline_index = TM_SpiderAnim01;
    
    if !timeline_running
    {
        timeline_position = 0;
        timeline_running = true;
        timeline_loop = true;
        timeline_speed = 0.25;
    }
}

if StateAnim == 1 &amp;&amp; GameMode = 1 {
    scr_cubeRotation01();
}
else if StateAnim == 2 &amp;&amp; GameMode = 1 {
    scr_cubeRotation02();
}

switch(GameMode) {
    case 1:
    if state == RUN {
        StateAnim = 1;
    }
    else {
        StateAnim = 2;
    }
    
    scr_cubePhysics()
    SpiderAlpha = 1.00;
    gravNorm    = 1.50 * TimeWarp;
    vyMax       = 24.0;
    break;
    
    case 2:
    ShipRotation = lerp(ShipRotation, -RotJetPack * facing, 0.25 * TimeWarp);
    scr_shipPhysics()
    break;
    
    case 3:
    BallRotation = BallRotation - (gravDir * (vx/2) * TimeWarp) * facing;
    scr_ballPhysics()
    SpiderAlpha = 1.00;
    gravNorm    = 1.00 * TimeWarp;
    vyMax       = 24.0;
    break;
    
    case 4:
    switch(gravDir) {
        case 1:
        if (vy &lt; 0) {
            UFORotation = lerp(UFORotation, vy, 0.15 * TimeWarp);
        } else if (vy &gt; 0) {
            UFORotation = lerp(UFORotation, 0, 0.15 * TimeWarp);
        }
        break;
        
        case -1:
        if (vy &gt; 0) {
            UFORotation = lerp(UFORotation, -vy, 0.15 * TimeWarp);
        } else if (vy &lt; 0) {
            UFORotation = lerp(UFORotation, 0, 0.15 * TimeWarp);
        }
        break;
    }
    
    if (vx == 0) {
        UFORotation = 0;
    }
    
    scr_ufoPhysics()
    SpiderAlpha = 1.00;
    gravNorm    = 1.00 * TimeWarp;
    vyMax       = 24.0;
    break;
    
    case 5:
    //Noone
    break;
    
    case 6:
    ArmadilloRotation = ArmadilloRotation - (gravDir * (vx/2) * TimeWarp) * facing;
    
    scr_armadilloPhysics()
    SpiderAlpha = 1.00;
    gravNorm    = 1.50 * TimeWarp;
    vyMax       = 24.0;
    break;
    
    case 7:
    scr_spiderPhysics()
    break;
    
    case 8:
    SwingRotation = lerp(SwingRotation, -vy, 0.1 * TimeWarp);
    scr_swingCopterPhysics()
    SpiderAlpha = 1.00;
    gravNorm    = 0.95 * TimeWarp;
    vyMax       = 24.0;
    break;
    
    case 9:
    JetPackRot = lerp(JetPackRot, -RotJetPack * facing, 0.10 * TimeWarp);
    scr_jetpackPhysics()
    break;
}

// Jump state check
if (!onGround) {
    state = JUMP;
    
    if (cLeft)
        facing = 1;
    if (cRight)
        facing = -1;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objOrbTeleport_02">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (kJumpPressed) {
    if (!Teleport02) {
        x = other.portal2.x;
        y = other.portal2.y;
        Teleport01 = true;
    }
    vy = -jumpHeight * gravDir;
}

Teleport02 = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objOrbTeleport_01">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (kJumpPressed) {
    if (!Teleport01) {
        x = other.portal2.x;
        y = other.portal2.y;
        Teleport02 = true;
    }
    vy = -jumpHeight * gravDir;
}

Teleport01 = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oParSpeeds">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_speedsCollision()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oParPortalSpecial">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(other.PortalSpecialGM) {
    case 1:
    Direction = 1;
    break;
    
    case 2:
    Direction = 2;
    break;
    
    case 3:
    x = other.portal2.x;
    y = other.portal2.y;
    break;
    
    case 5:
    gravDir = 1;
    break;
    
    case 6:
    gravDir = -1;
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oParPads">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_padCollision()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oParOrbsSpecial">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_orbSpecialCollision()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oParOrbs">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_orbCollision()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oParPortals">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(other.PortalGM) {
    case 1:
    GameMode = 1;
    
    sprite_set_offset(sprCubesCol01, 38, 38)
    sprite_set_offset(sprCubesCol02, 38, 38)
    sprite_set_offset(sprCubesColExtra, 38, 38)
    sprite_set_offset(sprCubeGlow, 40, 37)
    break;
    
    case 2:
    GameMode = 2;
    
    sprite_set_offset(sprCubesCol01, 34, 53)
    sprite_set_offset(sprCubesCol02, 34, 53)
    sprite_set_offset(sprCubesColExtra, 34, 53)
    sprite_set_offset(sprCubeGlow, 36, 52)
    
    sprite_set_offset(sprShipCol01, 51, 20)
    sprite_set_offset(sprShipCol02, 51, 20)
    sprite_set_offset(sprShipColExtra, 51, 20)
    sprite_set_offset(sprShipGlow, 53, 22)
    break;
    
    case 3:
    GameMode = 3;
    break;
    
    case 4:
    GameMode = 4;
    
    sprite_set_offset(sprCubesCol01, 38, 53)
    sprite_set_offset(sprCubesCol02, 38, 53)
    sprite_set_offset(sprCubesColExtra, 38, 53)
    sprite_set_offset(sprCubeGlow, 40, 52)
    
    sprite_set_offset(sprUFOCol01, 45, 32)
    sprite_set_offset(sprUFOCol02, 45, 32)
    sprite_set_offset(sprUFOColExtra, 45, 32)
    sprite_set_offset(sprUFOGlow, 45, 32)
    break;
    
    case 5:
    GameMode = 5;
    break;
    
    case 6:
    GameMode = 6;
    //instance_deactivate_object(obj_SpiderAnimControler)
    instance_activate_object(obj_ArmadilloAnimControler)
    break;
    
    case 7:
    GameMode = 7;
    //instance_activate_object(obj_SpiderAnimControler)
    instance_deactivate_object(obj_ArmadilloAnimControler)
    break;
    
    case 8:
    GameMode = 8;
    break;
    
    case 9:
    GameMode = 9;
    
    sprite_set_offset(sprCubesCol01, 23, 48)
    sprite_set_offset(sprCubesCol02, 23, 48)
    sprite_set_offset(sprCubesColExtra, 23, 48)
    sprite_set_offset(sprCubeGlow, 24, 47)
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//instance_destroy(obj_SpiderAnimControler)
instance_destroy(obj_ArmadilloAnimControler)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gravDir     = 1.00;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
image_xscale = 1.15
image_yscale = 1.15

switch(GameMode) {
    case 1:
    draw_set_blend_mode(bm_add)
    draw_sprite_ext(sprCubeGlow, global.CubeNumber, x, y, facing * xscale, yscale * gravDir, newimageangle * facing * gravDir, global.Col03, image_alpha)
    draw_set_blend_mode(bm_normal)
    
    draw_sprite_ext(sprCubesCol02, global.CubeNumber, x, y, facing * xscale, yscale * gravDir, newimageangle * facing * gravDir, global.Col02, image_alpha)
    draw_sprite_ext(sprCubesCol01, global.CubeNumber, x, y, facing * xscale, yscale * gravDir, newimageangle * facing * gravDir, global.Col01, image_alpha)
    draw_sprite_ext(sprCubesColExtra, global.CubeExtraNumber, x, y, facing * xscale, yscale * gravDir, newimageangle * facing * gravDir, c_white, global.CubeExtraAlpha * image_alpha)
    break;
    
    case 2:
    draw_set_blend_mode(bm_add)
    draw_sprite_ext(sprShipGlow, global.ShipNumber, x, y, facing * xscale, yscale * gravDir, ShipRotation * facing * gravDir, global.Col03, image_alpha)
    draw_sprite_ext(sprCubeGlow, global.CubeNumber, x, y, facing * 0.7, 0.7 * gravDir, ShipRotation * facing * gravDir, global.Col03, image_alpha)
    draw_set_blend_mode(bm_normal)
    
    draw_sprite_ext(sprCubesCol02, global.CubeNumber, x, y, facing * 0.7, 0.7 * gravDir, ShipRotation * facing * gravDir, global.Col02, image_alpha)
    draw_sprite_ext(sprCubesCol01, global.CubeNumber, x, y, facing * 0.7, 0.7 * gravDir, ShipRotation * facing * gravDir, global.Col01, image_alpha)
    draw_sprite_ext(sprCubesColExtra, global.CubeExtraNumber, x, y, facing * 0.7, 0.7 * gravDir, ShipRotation * facing * gravDir, c_white, global.CubeExtraAlpha * image_alpha)
    
    draw_sprite_ext(sprShipCol02, global.ShipNumber, x, y, facing * xscale, yscale * gravDir, ShipRotation * facing * gravDir, global.Col02, image_alpha)
    draw_sprite_ext(sprShipCol01, global.ShipNumber, x, y, facing * xscale, yscale * gravDir, ShipRotation * facing * gravDir, global.Col01, image_alpha)
    draw_sprite_ext(sprShipColExtra, global.ShipExtraNumber, x, y, facing * xscale, yscale * gravDir, ShipRotation * facing * gravDir, c_white, global.ShipExtraAlpha * image_alpha)
    break;
    
    case 3:
    draw_set_blend_mode(bm_add)
    draw_sprite_ext(sprBallGlow, global.BallNumber, x, y, facing * xscale, yscale, BallRotation * facing, global.Col03, image_alpha)
    draw_set_blend_mode(bm_normal)
    
    draw_sprite_ext(sprBallsCol02, global.BallNumber, x, y, facing * xscale, yscale, BallRotation * facing, global.Col02, image_alpha)
    draw_sprite_ext(sprBallsCol01, global.BallNumber, x, y, facing * xscale, yscale, BallRotation * facing, global.Col01, image_alpha)
    draw_sprite_ext(sprBallsColExtra, global.BallExtraNumber, x, y, facing * xscale, yscale, BallRotation * facing, c_white, global.BallExtraAlpha * image_alpha)
    break;
    
    case 4:
    draw_set_blend_mode(bm_add)
    draw_sprite_ext(sprUFOGlow, global.UFONumber, x, y, facing * xscale, yscale * gravDir, UFORotation * facing * gravDir, global.Col03, image_alpha)
    draw_sprite_ext(sprCubeGlow, global.CubeNumber, x, y, facing * 0.7, 0.7 * gravDir, UFORotation * facing * gravDir, global.Col03, image_alpha)
    draw_set_blend_mode(bm_normal)
    
    draw_sprite_ext(sprCubesCol02, global.CubeNumber, x, y, facing * 0.7, 0.7 * gravDir, UFORotation * facing * gravDir, global.Col02, image_alpha)
    draw_sprite_ext(sprCubesCol01, global.CubeNumber, x, y, facing * 0.7, 0.7 * gravDir, UFORotation * facing * gravDir, global.Col01, image_alpha)
    draw_sprite_ext(sprCubesColExtra, global.CubeExtraNumber, x, y, facing * 0.7, 0.7 * gravDir, UFORotation * facing * gravDir, c_white, global.CubeExtraAlpha * image_alpha)
    
    draw_sprite_ext(sprUFOCol03, global.UFONumber, x, y, facing * xscale, yscale * gravDir, UFORotation * facing * gravDir, c_white, image_alpha)
    draw_sprite_ext(sprUFOCol02, global.UFONumber, x, y, facing * xscale, yscale * gravDir, UFORotation * facing * gravDir, global.Col02, image_alpha)
    draw_sprite_ext(sprUFOCol01, global.UFONumber, x, y, facing * xscale, yscale * gravDir, UFORotation * facing * gravDir, global.Col01, image_alpha)
    draw_sprite_ext(sprUFOColExtra, global.UFOExtraNumber, x, y, facing * xscale, yscale * gravDir, 0, c_white, global.UFOExtraAlpha * image_alpha)
    break;
    
    case 5:
    draw_set_blend_mode(bm_add)
    draw_sprite_ext(sprWaveGlow, global.WaveNumber, x, y, facing * xscale, yscale * gravDir, 0, global.Col03, image_alpha)
    draw_set_blend_mode(bm_normal)
    
    draw_sprite_ext(sprWaveCol02, global.WaveNumber, x, y, facing * xscale, yscale * gravDir, 0, global.Col02, image_alpha)
    draw_sprite_ext(sprWaveCol01, global.WaveNumber, x, y, facing * xscale, yscale * gravDir, 0, global.Col01, image_alpha)
    draw_sprite_ext(sprWaveColExtra, global.WaveExtraNumber, x, y, facing * xscale, yscale * gravDir, 0, c_white, global.WaveExtraAlpha * image_alpha)
    break;
    
    case 6:
    if (instance_exists(obj_ArmadilloAnimControler)) {
        if (ArmadilloPos == 1) {
            scr_armadilloDraw()
        } else {
            draw_set_blend_mode(bm_add)
            draw_sprite_ext(sprArmadilloColGlow_02, global.ArmadilloNumber, x, y, facing * xscale, yscale, ArmadilloRotation * facing, global.Col03, 1)
            draw_set_blend_mode(bm_normal)
            
            draw_sprite_ext(sprArmadilloCol02_02, global.ArmadilloNumber, x, y, facing * xscale, yscale, ArmadilloRotation * facing, global.Col02, image_alpha)
            draw_sprite_ext(sprArmadilloCol01_02, global.ArmadilloNumber, x, y, facing * xscale, yscale, ArmadilloRotation * facing, global.Col01, image_alpha)
            draw_sprite_ext(sprArmadilloColExtra_02, global.ArmadilloExtraNumber, x, y, facing * xscale, yscale, ArmadilloRotation * facing, c_white, global.ArmadilloExtraAlpha * image_alpha)
        }
    }
    break;
    
    case 7:
    scr_spiderDraw()
    break;
    
    case 8:
    draw_set_blend_mode(bm_add)
    draw_sprite_ext(sprSwingGlow, global.SwingNumber, x, y, facing * xscale, yscale, SwingRotation * facing, global.Col03, image_alpha)
    draw_set_blend_mode(bm_normal)
    
    draw_sprite_ext(sprSwingCol02, global.SwingNumber, x, y, facing * xscale, yscale, SwingRotation * facing, global.Col02, image_alpha)
    draw_sprite_ext(sprSwingCol01, global.SwingNumber, x, y, facing * xscale, yscale, SwingRotation * facing, global.Col01, image_alpha)
    draw_sprite_ext(sprSwingColExtra, global.SwingExtraNumber, x, y, facing * xscale, yscale, SwingRotation * facing, c_white, global.SwingExtraAlpha * image_alpha)
    break;
    
    
    case 9:
    draw_set_blend_mode(bm_add)
    draw_sprite_ext(sprJetPackGlow, global.JetPackNumber, x, y, facing * xscale, yscale * gravDir, JetPackRot * facing * gravDir, global.Col03, image_alpha)
    draw_sprite_ext(sprCubeGlow, global.CubeNumber, x, y, facing * 0.8, 0.8 * gravDir, JetPackRot * facing * gravDir, global.Col03, image_alpha)
    draw_set_blend_mode(bm_normal)
    
    draw_sprite_ext(sprCubesCol02, global.CubeNumber, x, y, facing * 0.8, 0.8 * gravDir, JetPackRot * facing * gravDir, global.Col02, image_alpha)
    draw_sprite_ext(sprCubesCol01, global.CubeNumber, x, y, facing * 0.8, 0.8 * gravDir, JetPackRot * facing * gravDir, global.Col01, image_alpha)
    draw_sprite_ext(sprCubesColExtra, global.CubeExtraNumber, x, y, facing * 0.8, 0.8 * gravDir, JetPackRot * facing * gravDir, c_white, global.CubeExtraAlpha * image_alpha)
    
    draw_sprite_ext(sprJetPackCol02, global.JetPackNumber, x, y, facing * xscale, yscale * gravDir, JetPackRot * facing * gravDir, global.Col02, image_alpha)
    draw_sprite_ext(sprJetPackCol01, global.JetPackNumber, x, y, facing * xscale, yscale * gravDir, JetPackRot * facing * gravDir, global.Col01, image_alpha)
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,0</point>
    <point>32,32</point>
    <point>0,32</point>
  </PhysicsShapePoints>
</object>
