<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Enabled = true;

surfA = surface_create(display_get_gui_width(), display_get_gui_height());

//GreyScale
GrayScaleFade = shader_get_uniform(shdr_grayscale,"fade");
GrayeScaleRes = shader_get_uniform(shdr_grayscale,"resolution");

//InvertColor
InvertTime = shader_get_uniform(shdr_invert,"time");

//Pixelate
PixelateResolution = shader_get_uniform(shdr_pixelate,"resolution");
PixelateAmount = shader_get_uniform(shdr_pixelate, "pixel_amount");

//Sepia
SepiaStrength = shader_get_uniform(shdr_sepia,"strength");

//Chromatic Aberration
_dispX = shader_get_uniform(shdr_chromatic_aberration, "displacementX");
_dispY = shader_get_uniform(shdr_chromatic_aberration, "displacementY");

//Lens Circle
Res = shader_get_uniform(shdr_lensCircle, "iResolution");

//greyscale = shader_get_uniform(shdr_uberShader, "greyscale");

//bloomIntensity = shader_get_uniform(shdr_uberShader, 'intensity');
//bloomblurSize = shader_get_uniform(shdr_uberShader, 'blurSize');

application_surface_draw_enable(false)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// common uniforms
ScreenAspect = shader_get_uniform(shader14, "_screenAspect")
ScreenAspectInv = shader_get_uniform(shader14, "_screenAspectInv")
TextureScale = shader_get_uniform(shader14, "_textureScale")
TextureScaleInv = shader_get_uniform(shader14, "_textureScaleInv")
ShaderPosition = shader_get_uniform(shader14, "_shaderPosition")
BlurRefColor = shader_get_uniform(shader14, "_blurRefColor")
BlurUseRef = shader_get_uniform(shader14, "_blurUseRef")
BlurIntensity = shader_get_uniform(shader14, "_blurIntensity")
Texture = shader_get_sampler_index(shader14, "CC_Texture")

// grayscale uniforms
GrayScaleValue = shader_get_uniform(shader14, "_grayscaleValue")
GrayScaleTint = shader_get_uniform(shader14, "_grayscaleTint")
GrayScaleUseLum = shader_get_uniform(shader14, "_grayscaleUseLum")

// hue uniforms
HueShiftCosA = shader_get_uniform(shader14, "_hueShiftCosA")
HueShiftSinA = shader_get_uniform(shader14, "_hueShiftSinA")

// invert color uniforms
InvertColorValue = shader_get_uniform(shader14, "_invertColorValue")

// chromatic uniforms
ChromaticXOff = shader_get_uniform(shader14, "_chromaticXOff")
ChromaticYOff = shader_get_uniform(shader14, "_chromaticYOff")

// lens circle uniforms
LensCircleOrigin = shader_get_uniform(shader14, "_lensCircleOrigin")
LensCircleStart = shader_get_uniform(shader14, "_lensCircleStart")
LensCircleEnd = shader_get_uniform(shader14, "_lensCircleEnd")
LensCircleStrength = shader_get_uniform(shader14, "_lensCircleStrength")

// sepia uniforms
SepiaValue = shader_get_uniform(shader14, "_sepiaValue")

// bulge uniforms
BulgeValue = shader_get_uniform(shader14, "_bulgeValue")
BulgeValue2 = shader_get_uniform(shader14, "_bulgeValue2")

// pinch uniforms
PinchValue = shader_get_uniform(shader14, "_pinchValue")
PinchCenterPos = shader_get_uniform(shader14, "_pinchCenterPos")

// motionblur uniforms
MotionBlurValue = shader_get_uniform(shader14, "_motionBlurValue")
MotionBlurMult = shader_get_uniform(shader14, "_motionBlurMult")

// radialblur uniforms
RadialBlurCenter = shader_get_uniform(shader14, "_radialBlurCenter")
RadialBlurValue = shader_get_uniform(shader14, "_radialBlurValue")

// splitscreen uniforms
Rowmod = shader_get_uniform(shader14, "_rowmod")
Colmod = shader_get_uniform(shader14, "_colmod")
RowmodCalc = shader_get_uniform(shader14, "_rowmodCalc")
ColmodCalc = shader_get_uniform(shader14, "_colmodCalc")

// change color uniforms
ColorChangeB = shader_get_uniform(shader14, "_colorChangeB") // brightness
ColorChangeC = shader_get_uniform(shader14, "_colorChangeC") // contrast

spr = surface_get_texture(application_surface)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if ((!surface_exists(surfA)))
{
    surfA=surface_create(display_get_gui_width(), display_get_gui_height());
}

if ((!surface_exists(surfB)))
{
    surfB=surface_create(display_get_gui_width(), display_get_gui_height());
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*surface_free(surfA);
surface_free(surfB);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*surface_free(surfA);
surface_free(surfB);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (Enabled = true) {
    shader_set(shdr_lensCircle);
    shader_set_uniform_f(ScreenAspect, 5)
    shader_set_uniform_f(ScreenAspectInv, 5)
    shader_set_uniform_f(TextureScale, 5)
    shader_set_uniform_f(TextureScaleInv, 5)
    shader_set_uniform_f(ShaderPosition, 5)
    shader_set_uniform_f(BlurRefColor, 1)
    shader_set_uniform_f(BlurUseRef, 1)
    shader_set_uniform_f(BlurIntensity, 1)
    shader_set_uniform_f(LensCircleOrigin, 0, 0)
    shader_set_uniform_f(LensCircleStart, 0)
    shader_set_uniform_f(LensCircleEnd, 0)
    shader_set_uniform_f(LensCircleStrength, 0)
    draw_surface(application_surface,0,0);
    shader_reset();
}
else {
    draw_surface(application_surface,0,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>application_surface_draw_enable(Enabled)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
